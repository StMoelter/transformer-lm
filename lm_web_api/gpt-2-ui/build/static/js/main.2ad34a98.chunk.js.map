{"version":3,"sources":["components/GeneratedText.js","actions/predictions.js","components/Generator.js","components/Predictions.js","components/SampleText.js","components/Temperature.js","components/TopK.js","components/Tokens.js","App.js","data/initialState.js","data/reducer.js","middleware/Middleware.js","serviceWorker.js","index.js"],"names":["GeneratedText","props","context","setText","bind","event","this","target","value","Card","Header","Body","Text","Form","Control","as","rows","generatedtext","onChange","React","Component","connect","state","dispatch","type","fetchPredictionsLoading","bool","isLoading","Generator","loadPredictions","fetchPredictions","sampletext","temperature","tokens","topk","Button","variant","disabled","Spinner","animation","size","role","aria-hidden","onClick","params","data","text","amount_of_predictions","amountOfPredictions","topk_k","tokens_to_generate","axios","post","headers","Authorization","then","response","status","Error","statusText","predictions","result","time","catch","hasError","errorMessage","Predictions","metaData","showPrediction","map","prediction","key","uuidv4","className","addText","length","Row","Col","showPredictions","SampleText","e","setSampleText","Temperature","handleChange","setTemperature","Math","round","resetValue","resetTemperature","blur","formatValue","roundedValue","intValue","trunc","decimals","String","padStart","padEnd","min","max","step","Footer","TopK","resetTopK","setTopK","Tokens","resetTokens","setTokens","App","Container","Navbar","bg","Brand","href","reducer","initialState","action","applyMiddleware","thunk","store","next","console","log","getState","Boolean","window","location","hostname","match","createStore","rootReducer","middleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2ad34a98.chunk.js","sourcesContent":["import Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport React from 'react';\n\nimport { connect } from \"react-redux\";\n\nclass GeneratedText extends React.Component {\n  constructor (props, context) {\n    super(props, context)\n    this.setText = this.setText.bind(this)\n  }\n\n  setText(event){\n    this.props.setText(event.target.value)\n  }\n\n  render() {\n    return (\n      <Card>\n        <Card.Header>Generated Text</Card.Header>\n        <Card.Body>\n          <Card.Text>\n            <Form.Control\n              as=\"textarea\"\n              rows=\"10\"\n              value={ this.props.generatedtext }\n              onChange={ this.setText }\n            />\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  generatedtext: state.generatedtext,\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setText: (generatedtext) => { dispatch({ type: \"setText\", generatedtext: generatedtext }) },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneratedText)\n","import axios from 'axios'\n\nexport function fetchPredictionsError(bool, message) {\n  return {\n    type: 'FETCH_PREDICTIONS_ERROR',\n    hasError: bool,\n    errorMessage: message\n  }\n}\n\nexport function fetchPredictionsLoading(bool) {\n  return {\n    type: 'FETCH_PREDICTIONS_LOADING',\n    isLoading: bool\n  }\n}\n\nexport function fetchPredictionsSuccess(predictions, time) {\n  return {\n    type: 'FETCH_PREDICTIONS_SUCCESS',\n    predictions: predictions,\n    time: time\n  }\n}\n\nexport function fetchPredictions(data) {\n  return (dispatch) => {\n    dispatch(fetchPredictionsLoading(true));\n    const url = 'http://localhost:8000/gpt2'\n    const headers = { headers: { Authorization: 'Bearer 337b14a7-5865-4b24-a2f0-44d98133c860' }}\n    // const params = { text: \"Es war einmal eine kleine Prinzessin, die hatte eine goldene Ente.\" }\n    const params = {\n      text: data.sampletext + ' ' + data.generatedtext,\n      params: {\n        amount_of_predictions: data.amountOfPredictions || 5,\n        temperature: data.temperature,\n        topk_k: data.topk,\n        tokens_to_generate: data.tokens,\n      }\n    }\n    axios.post(url, params, headers)\n      .then((response) => {\n        dispatch(fetchPredictionsLoading(false))\n          if (response.status !== 200) {\n            throw Error(response.statusText)\n          }\n          return response\n        })\n        .then((response) => dispatch(fetchPredictionsSuccess(response.data.result.predictions, response.data.time)))\n        .catch(() => dispatch(fetchPredictionsError(true, 'Unknown Error')))\n  }\n}\n","import Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\nimport React from 'react';\n\nimport { connect } from \"react-redux\";\nimport { fetchPredictions } from '../actions/predictions'\n\nclass Generator extends React.Component {\n  constructor (props, context) {\n    super(props, context)\n    this.loadPredictions = this.loadPredictions.bind(this)\n  }\n\n  loadPredictions() {\n    this.props.fetchPredictions({\n      generatedtext: this.props.generatedtext,\n      sampletext: this.props.sampletext,\n      temperature: this.props.temperature,\n      tokens: this.props.tokens,\n      topk: this.props.topk,\n    })\n  }\n\n  render() {\n    return (\n      <Card>\n        <Card.Header>Go</ Card.Header>\n        <Card.Body>{\n          this.props.isLoading ?\n            <Button variant=\"primary\" disabled>\n              <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n              &nbsp; Loading...\n            </Button>\n          : <Button as=\"input\" type=\"submit\" value=\"Generate\" size=\"lg\" onClick={ this.loadPredictions }/>\n        }\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoading: state.isLoading,\n  generatedtext: state.generatedtext,\n  sampletext: state.sampletext,\n  temperature: state.temperature,\n  tokens: state.tokens,\n  topk: state.topk,\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchPredictions: (params) => dispatch(fetchPredictions(params))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Generator)\n","import Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport TextSelector from 'text-selection-react'\n\nimport { connect } from \"react-redux\";\nimport { v4 as uuidv4 } from 'uuid';\n\n\nclass Predictions extends React.Component {\n  constructor (props, context) {\n    super(props, context)\n    this.metaData = this.metaData.bind(this)\n    this.showPrediction = this.showPrediction.bind(this)\n  }\n\n  showPredictions() {\n    return this.props.predictions.map( (prediction) =>\n      this.showPrediction(prediction)\n    )\n  }\n\n  showPrediction(prediction) {\n    return (\n      <Card.Body key={uuidv4()}>\n        <div className=\"d-flex\">\n          <div className=\"p-2\">\n            {prediction}\n          </div>\n          <div className=\"p-2 ml-auto\">\n            <Button\n              as=\"input\"\n              type=\"submit\"\n              value=\"Apply\"\n              size=\"sm\"\n              onClick={ () => this.props.addText(prediction) }\n            />\n          </div>\n        </div>\n      </Card.Body>\n    )\n  }\n\n  metaData() {\n    const amount_of_predictions = this.props.predictions.length\n    if(amount_of_predictions == 0) {\n      return ''\n    }\n    return ` ( time: ${this.props.time} | amount: ${amount_of_predictions} )`\n  }\n\n  render() {\n    return (\n      <Row className=\"mt-3\"><Col>\n        <Card>\n          <Card.Header>Predictions{this.metaData()}</Card.Header>\n          {this.showPredictions()}\n        </ Card>\n      </Col></Row>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoading: state.isLoading,\n  predictions: state.predictions,\n  time: state.time,\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addText: (text) => dispatch({type: 'addText', text: text})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Predictions)\n","import Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport React from 'react';\nimport { connect } from \"react-redux\";\n\nclass SampleText extends React.Component {\n  render() {\n    return (\n      <Card>\n        <Card.Header>Sample Text</Card.Header>\n        <Card.Body>\n          <Card.Text>\n            <Form.Control\n              as=\"textarea\"\n              rows=\"10\"\n              value={this.props.sampletext}\n              onChange={(e) => this.props.setSampleText(e.target.value)} \n            />\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  sampletext: state.sampletext,\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSampleText: (sampletext) => { dispatch({ type: \"setSampleText\", sampletext: sampletext }) },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SampleText)\n","import Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport React from 'react';\nimport Slider from 'react-rangeslider'\nimport { connect } from \"react-redux\";\n\nimport 'react-rangeslider/lib/index.css'\n\nclass Temperature extends React.Component {\n  constructor (props, context) {\n    super(props, context)\n    this.state = {\n      value: 1,\n      resetValue: 1,\n    }\n    this.resetValue = this.resetValue.bind(this)\n    this.formatValue = this.formatValue.bind(this)\n  }\n\n  handleChange = (value) => {\n    this.props.setTemperature(Math.round(value * 100) / 100)\n  }\n\n  resetValue = (event) => {\n    const setTemperature = this.props.resetTemperature()\n    event.target.blur()\n  }\n\n  formatValue = (value) => {\n    const roundedValue = Math.round(value * 100) / 100\n    const intValue = Math.trunc(roundedValue)\n    const decimals = Math.round((roundedValue - intValue) * 10)\n    return String(intValue).padStart(2, '0') + '.' + String(decimals).padEnd(1, '0')\n  }\n\n  render() {\n    const temperature = this.props.temperature\n    return (\n      <Card>\n        <Card.Header>Temperature</Card.Header>\n        <Card.Body>\n          <Slider\n            min={0.1}\n            max={10}\n            step={0.1}\n            value={temperature}\n            onChange={this.handleChange}\n          />\n        </Card.Body>\n        <Card.Footer>\n          <div className=\"d-flex\">\n            <div className=\"p-2\">\n              <Button as=\"input\" type=\"button\" value={this.formatValue(temperature)} size=\"sm\" disabled/>\n            </div>\n            <div className=\"p-2 ml-auto\">\n              <Button as=\"input\" type=\"reset\" value=\"Reset\" size=\"sm\" onClick={this.resetValue}/>\n            </div>\n          </div>\n        </Card.Footer>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  temperature: state.temperature,\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setTemperature: (temperature) => { dispatch({ type: \"setTemperature\", temperature: temperature }) },\n    resetTemperature: () => { dispatch({ type: \"resetTemperature\" }) },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Temperature)\n","import Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport React from 'react';\nimport Slider from 'react-rangeslider'\nimport { connect } from \"react-redux\";\n\nimport 'react-rangeslider/lib/index.css'\n\nclass TopK extends React.Component {\n  constructor (props, context) {\n    super(props, context)\n    this.resetValue = this.resetValue.bind(this)\n  }\n\n  resetValue = (event) => {\n    this.props.resetTopK()\n    event.target.blur()\n  }\n\n  render() {\n    const topk = this.props.topk\n    const setTopK = this.props.setTopK\n    return (\n      <Card>\n        <Card.Header>Top K</Card.Header>\n        <Card.Body>\n          <Slider\n            min={1}\n            max={100}\n            step={1}\n            value={topk}\n            onChange={setTopK}\n          />\n        </Card.Body>\n        <Card.Footer>\n          <div className=\"d-flex\">\n            <div className=\"p-2\">\n              <Button as=\"input\" type=\"button\" value={String(topk).padStart(3, '0')} size=\"sm\" disabled/>\n            </div>\n            <div className=\"p-2 ml-auto\">\n              <Button as=\"input\" type=\"reset\" value=\"Reset\" size=\"sm\" onClick={this.resetValue}/>\n            </div>\n          </div>\n        </Card.Footer>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  topk: state.topk,\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setTopK: (topk) => { dispatch({ type: \"setTopK\", topk: topk }) },\n    resetTopK: () => { dispatch({ type: \"resetTopK\" }) },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopK)\n","import Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport React from 'react';\nimport Slider from 'react-rangeslider'\nimport { connect } from \"react-redux\";\n\n\nimport 'react-rangeslider/lib/index.css'\n\nclass Tokens extends React.Component {\n  constructor (props, context) {\n    super(props, context)\n    this.resetValue = this.resetValue.bind(this)\n  }\n\n  resetValue = (event) => {\n    this.props.resetTokens()\n    event.target.blur()\n  }\n\n  render() {\n    const tokens = this.props.tokens\n    const setTokens = this.props.setTokens\n    return (\n      <Card>\n        <Card.Header>Tokens</Card.Header>\n        <Card.Body>\n          <Slider\n            min={1}\n            max={100}\n            step={1}\n            value={tokens}\n            onChange={setTokens}\n          />\n        </Card.Body>\n        <Card.Footer>\n          <div className=\"d-flex\">\n            <div className=\"p-2\">\n              <Button as=\"input\" type=\"button\" value={String(tokens).padStart(3, '0')} size=\"sm\" disabled/>\n            </div>\n            <div className=\"p-2 ml-auto\">\n              <Button as=\"input\" type=\"reset\" value=\"Reset\" size=\"sm\" onClick={this.resetValue}/>\n            </div>\n          </div>\n        </Card.Footer>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  tokens: state.tokens,\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setTokens: (tokens) => { dispatch({ type: \"setTokens\", tokens: tokens }) },\n    resetTokens: () => { dispatch({ type: \"resetTokens\" }) },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tokens)\n","import Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport GeneratedText from './components/GeneratedText'\nimport Generator from './components/Generator'\nimport Predictions from './components/Predictions'\nimport SampleText from './components/SampleText'\nimport Temperature from './components/Temperature'\nimport TopK from './components/TopK'\nimport Tokens from './components/Tokens'\n\nfunction App() {\n  return (\n    <Container>\n      <Navbar  bg=\"primary\" variant=\"dark\">\n        <Navbar.Brand href=\"#\">gpt-2 ui by Steffen</Navbar.Brand>\n      </Navbar>\n      <Row className=\"mt-3\">\n        <Col><GeneratedText /></Col>\n        <Col><SampleText /></Col>\n      </Row>\n      <Predictions />\n      <Row className=\"mt-3\">\n        <Col><Generator /></Col>\n        <Col><TopK /></Col>\n        <Col><Temperature /></Col>\n        <Col><Tokens /></Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","export default {\n  amountOfPredictions: 5,\n  errorMessage: '',\n  generatedtext: 'Es war einmal eine Prinzessin, die hatte eine kleine Ente.',\n  isLoading: false,\n  predictions: [],\n  sampletext: \"Was erlauben Strunz? Haben Sie gesehen Mittwoch, welche Mannschaft hat gespielt Mittwoch? Hat gespielt Mehmet, oder gespielt Basler, oder gespielt Trapattoni? Diese Spieler beklagen mehr als spiel! Wissen Sie, warum die Italien-Mannschaften kaufen nicht diese Spieler? Weil wir haben gesehen viele Male Summe Spiel. Haben gesagt, sind nicht Spieler für die italienisch Meisters. Strunz! Strunz ist zwei Jahre hier, hat gespielt zehn Spiele, ist immer verletzt. Was erlauben Strunz? Letzte Jahre Meister geworden mit Hamann äh Nerlinger. Diese Spieler waren Spieler! War Meister geworden! Ist immer verletzt! Hat gespielt 25 Spiele in diese Mannschaft, in diese Verein! Muss respektieren die andere Kollega! Haben viel nette Kollegan, stellen sie die Kollega in Frage! Haben keinen Mut an Worten, aber ich weiss, was denken über diese Spieler!\",\n  temperature: 1.0,\n  time: '0',\n  tokens: 40,\n  topk: 20,\n}\n","import { combineReducers } from 'redux'\nimport initialState from './initialState'\n\nconst reducer  = (state = initialState, action) => {\n  switch (action.type) {\n    case 'setTopK':\n      return {\n        ...state,\n        topk: action.topk,\n      }\n    case 'resetTopK':\n      return {\n        ...state,\n        topk: initialState.topk,\n      }\n    case 'setTokens':\n      return {\n        ...state,\n        tokens: action.tokens,\n      }\n    case 'resetTokens':\n      return {\n        ...state,\n        tokens: initialState.tokens,\n      }\n    case 'setTemperature':\n      return {\n        ...state,\n        temperature: action.temperature,\n      }\n    case 'resetTemperature':\n      return {\n        ...state,\n        temperature: initialState.temperature,\n      }\n    case 'setSampleText':\n      return {\n        ...state,\n        sampletext: action.sampletext,\n      }\n    case 'FETCH_PREDICTIONS_LOADING':\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      }\n    case 'FETCH_PREDICTIONS_ERROR':\n      return {\n        ...state,\n        errorMessage: action.errorMessage,\n        isLoading: false,\n      }\n    case 'FETCH_PREDICTIONS_SUCCESS':\n      return {\n        ...state,\n        errorMessage: '',\n        isLoading: false,\n        predictions: action.predictions,\n        time: action.time,\n      }\n    case 'addText':\n      return {\n        ...state,\n        generatedtext: state.generatedtext + ' ' + action.text\n      }\n    case 'setText':\n      return {\n        ...state,\n        generatedtext: action.generatedtext\n      }\n    default:\n      return state\n  }\n}\n\n// export default combineReducers(reducer)\nexport default reducer\n","import { applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk';\n\n\nconst loggingMiddleware = (store) => (next) => (action) => {\n  console.log('dispatching', action)\n  console.log('previous time', store.getState().time)\n  next(action)\n  // log the updated state, after calling next(action)\n  console.log('new time', store.getState().time)\n}\n\n\n\n\nexport default applyMiddleware(thunk, loggingMiddleware)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './data/reducer'\nimport middleware from './middleware/Middleware'\n\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, middleware)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}